---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';

import XPCalc from '../scripts/XPCalculator';

---

<Layout title="DM Tools.">
	<main>
		<h1><span class="text-gradient">D&D 5E</span> DM TOOL </h1>

		<form class='instructions'>
			<h2>Party XP Calculator</h2>
			<label for="partySize">Party Size</label>
			<input type="number" id="partySize" name="partySize" min="0" max="6" value="0">
		  
			<div class="chr1lvl">
			  <label for="chr1lvl">Character 1 Level:</label>
			  <input type="number" id="chr1lvl" name="chr1lvl" min="1" max="20" value="1">
			</div>
		  
			<div class="chr2lvl">
			  <label for="chr2lvl">Character 2 Level:</label>
			  <input type="number" id="chr2lvl" name="chr2lvl" min="1" max="20" value="1">
			</div>
		  
			<div class="chr3lvl">
			  <label for="chr3lvl">Character 3 Level:</label>
			  <input type="number" id="chr3lvl" name="chr3lvl" min="1" max="20" value="1">
			</div>
		  
			<div class="chr4lvl">
			  <label for="chr4lvl">Character 4 Level:</label>
			  <input type="number" id="chr4lvl" name="chr4lvl" min="1" max="20" value="1">
			</div>
		  
			<div class="chr5lvl">
			  <label for="chr5lvl">Character 5 Level:</label>
			  <input type="number" id="chr5lvl" name="chr5lvl" min="1" max="20" value="1">
			</div>
		  
			<div class="chr6lvl">
			  <label for="chr6lvl">Character 6 Level:</label>
			  <input type="number" id="chr6lvl" name="chr6lvl" min="1" max="20" value="1">
			</div>
			<!-- return total xp needed -->
			<button type="submit">Calculate</button>
		</form>

			<!-- display totalXp -->
			<div><label id="Party">Total XP Needed: 0</label></div>
			<div><label id="Easy">Easy Difficulty: 0</label></div>
			<div><label id="Medium">Medium Difficulty: 0</label></div>
			<div><label id="Hard">Hard Difficulty: 0</label></div>
			<div><label id="Deadly">Deadly Difficulty: 0</label></div>
		
	</main>
</Layout>
<code>
	<script>
		
		let partySize = document.getElementById('partySize');
		
		// display character level fields based on party size
		let chrLvlFields = [];
		for (let i = 1; i <= 6; i++) {
			chrLvlFields.push(document.querySelector(`.chr${i}lvl`));
			}

			chrLvlFields.forEach(field => field.style.display = 'none');

			partySize.addEventListener('change', function() {
			let partySizeValue = partySize.value;

			chrLvlFields.forEach((field, i) => {
				field.style.display = i < partySizeValue ? 'block' : 'none';
			});
		});

		//add event listener to form to calculate total xp needed
		document.querySelector('form').addEventListener('submit', function(e) {
			e.preventDefault();

			let partySize = document.getElementById('partySize').value;
			let chr1 = document.getElementById('chr1lvl').value;

			let chr2 = document.getElementById('chr2lvl').value;
			let chr3 = document.getElementById('chr3lvl').value;
			let chr4 = document.getElementById('chr4lvl').value;
			let chr5 = document.getElementById('chr5lvl').value;
			let chr6 = document.getElementById('chr6lvl').value;

			// use XPCalculator.ts the formula XPCalc to calculate total xp needed
			let xpResult = XPCalc(partySize, chr1, chr2, chr3, chr4, chr5, chr6);

			// display total xp needed
			document.getElementById('Party').textContent = `Total XP Needed: ${xpResult.totalXpParty}`;
			document.getElementById('easy').textContent = `Easy Difficulty: ${xpResult.totalXpEasy}`;
			document.getElementById('medium').textContent = `Medium Difficulty: ${xpResult.totalXpMedium}`;
			document.getElementById('hard').textContent = `Hard Difficulty: ${xpResult.totalXpHard}`;
			document.getElementById('deadly').textContent = `Deadly Difficulty: ${xpResult.totalXpDeadly}`;
		});
	</script>
</code>	
<style>
	main {
		margin: auto;
		padding: 3rem;
		max-width: 80ch;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
	#hidden {
		display: none;
	}
</style>
